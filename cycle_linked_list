class Node:
    def __init__(self,val):
        self.val=val
        self.next=None
class singlylinkedlist:
    def __init__(self):
        self.head=None
    def append (self,val):
        new_node=Node(val)
        if self.head==None:
            self.head=new_node
            new_node.next=self.head
        else:
            curr=self.head
            while curr.next !=self.head :
                curr=curr.next
            curr.next=new_node
            new_node.next=self.head




  
    def traverse (self):
        if self.head is None:
            print("empty linked list")
        curr = self.head
        while True:
            print(curr.val, end=" , ")
            curr = curr.next
            if curr == self.head:
                break



  
    # check the cycle loop in linked list
    def check_loop(self):
        slow=self.head
        fast=self.head
        while fast is not None and fast.next is not None:
            fast=fast.next.next
            slow=slow.next
            if fast==slow :
                print("cycle found")
                return True 
        print("cycle not found")
        return False 



  
    # first element check / find the linkled list
    def check_first(self):
        slow=self.head
        fast=self.head
        while fast is not None and fast.next is not None:
            fast=fast.next.next
            slow=slow.next
            if fast==slow :
                slow=self.head
                while slow != fast :
                    slow=slow.next
                    fast=fast.next 
                return slow 
        return None 



  
    # count of element of linked list 
    def length_counts(self):
        slow=self.head
        fast=self.head
        while fast is not None and fast.next is not None:
            fast=fast.next.next
            slow=slow.next
            count=0
            if fast==slow :
                slow=slow.next
                count=1
                while slow != fast :
                    slow=slow.next
                    count+=1
                return count
        return None
    
                

s=singlylinkedlist()
s.append(92)
s.append(90000)
s.append(905)
s.append(906)
s.append(907)
s.check_loop()
first_element=s.check_first()
if first_element:
    print(f"first elament of the linked list {first_element.val}")
else:
    print("cycle not found")

length=s.length_counts()
if length:
    print(f"the length of linked list:{length}")
else:
    print("cycle is not found ")
s.traverse()
